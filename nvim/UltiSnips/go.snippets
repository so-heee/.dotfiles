# Snippets for Go

priority -10

# Fmt Printf debug
snippet ff "fmt.Printf(...)"
fmt.Printf("$1 = %+v\n", ${1:${VISUAL}})
endsnippet

# Fmt Println debug
snippet fn "fmt.Println(...)"
fmt.Println("${1:${VISUAL}}")
endsnippet

# Fmt Errorf wrap
snippet few "fmt.Errorf(%w, err)"
fmt.Errorf("${1:message}: %w", ${2:${VISUAL:err}})
endsnippet

# log printf
snippet lf "log.Printf(...)"
log.Printf("$1 = %+v\n", ${1:${VISUAL}})
endsnippet

# log println
snippet ln "log.Println(...)"
log.Println("${1:${VISUAL}}")
endsnippet

# struct
snippet st "type T struct { ... }"
// $1.
type ${1:Type} struct {
	${0}
}
endsnippet

# full interface snippet
snippet interface "interface I { ... }"
// $1.
type ${1:Interface} interface {
	${2:/* TODO: add methods */}
}
endsnippet

# main()
snippet main "main"
package main

func main() {
	${0:${VISUAL}}
}
endsnippet

# function
snippet func "func Function(...) [error] { ... }"
// $1.
func ${1:name}(${2:params})${3/(.+)/ /}`!p opening_par(snip, 3)`$3`!p closing_par(snip, 3)` {
	${0:${VISUAL}}
}
endsnippet

# for loop
snippet for "for ... { ... }"
for ${1} {
	${0:${VISUAL}}
}
endsnippet

# for integer loop
snippet fori "for 0..N-1 { ... }"
for ${1:i} := 0; $1 < ${2:N}; $1++ {
	${0:${VISUAL}}
}
endsnippet

# for range loop
snippet forr "for k, v := range items { ... }"
for ${2:k}, ${3:v} := range ${1} {
	${0:${VISUAL}}
}
endsnippet

# error snippet
snippet errn "Error"
if err != nil {
	${1}
}
${0}
endsnippet

# if inline error
snippet ife "Error Inline"
if err := ${1:condition}; err != nil {
	${0:${VISUAL}}
}
endsnippet

# append assignment
snippet ap "a = append(a, value)"
${1:slice} = append($1, ${0:value})
endsnippet
